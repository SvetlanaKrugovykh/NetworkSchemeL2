const { Pool } = require('pg');

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'netscheme_l2',
  password: 'admin',
  port: 5432,
});

async function testMacSearch() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ MAC –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±–∞–∑—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ MAC –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const macSample = await pool.query('SELECT DISTINCT mac_address FROM mac_addresses LIMIT 5');
    console.log('–ü—Ä–∏–º–µ—Ä—ã MAC –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ:');
    macSample.rows.forEach((row, index) => {
      console.log(`${index + 1}. ${row.mac_address}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –ø–µ—Ä–≤—ã–º MAC –∞–¥—Ä–µ—Å–æ–º
    if (macSample.rows.length > 0) {
      const testMac = macSample.rows[0].mac_address;
      console.log(`\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ MAC: ${testMac}`);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º MAC –∞–¥—Ä–µ—Å –∫–∞–∫ –≤ –∫–æ–¥–µ
      const normalizedMac = testMac.replace(/[:-]/g, '').toLowerCase();
      console.log(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MAC: ${normalizedMac}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
      const searchQuery = `
        SELECT
          ma.mac_address,
          ma.vlan_id,
          ma.vlan_mode,
          d.ip_address as device_ip,
          d.hostname as device_hostname,
          dp.port_name
        FROM mac_addresses ma
        JOIN devices d ON ma.device_id = d.id
        JOIN device_ports dp ON ma.port_id = dp.id
        WHERE LOWER(REPLACE(REPLACE(ma.mac_address, ':', ''), '-', '')) = $1
        LIMIT 3
      `;
      
      const searchResult = await pool.query(searchQuery, [normalizedMac]);
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${searchResult.rows.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (searchResult.rows.length > 0) {
        searchResult.rows.forEach((row, index) => {
          console.log(`\n–ó–∞–ø–∏—Å—å ${index + 1}:`);
          console.log(`  MAC: ${row.mac_address}`);
          console.log(`  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${row.device_ip} (${row.device_hostname})`);
          console.log(`  –ü–æ—Ä—Ç: ${row.port_name}`);
          console.log(`  VLAN: ${row.vlan_id}`);
        });
      } else {
        console.log('‚ùå MAC –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫
        const directSearch = await pool.query('SELECT * FROM mac_addresses WHERE mac_address = $1 LIMIT 1', [testMac]);
        console.log(`\nüîç –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${directSearch.rows.length} –∑–∞–ø–∏—Å–µ–π`);
      }
    }
    
    await pool.end();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

testMacSearch();